---
description: 
globs: 
alwaysApply: false
---
 # Правила контекста для AI

## Определение
Контекст - это память AI о текущем состоянии проекта, которая обновляется после каждого значимого изменения.

## Базовая структура
```typescript
interface ProjectContext {
  state: {
    version: string        // Текущая версия проекта
    features: string[]     // Активные фичи
    lastUpdate: Date       // Последнее обновление
  }
  
  changes: {
    type: 'code' | 'config' | 'docs' | 'deps'
    description: string    // Краткое описание
    files: string[]       // Затронутые файлы
  }[]
}
```

## Триггеры обновления

### 1. Код
- Новые компоненты
- Изменение логики
- Рефакторинг
- Исправление багов

### 2. Конфигурация
- Package.json
- Env файлы
- Настройки сборки
- API ключи

### 3. База данных
- Схема
- Миграции
- Индексы

### 4. Документация
- Комментарии
- README
- docs

## Формат обновления
```markdown
[Дата] Обновление контекста

Изменения:
- Тип: код/конфиг/документация/бд
- Файлы: список измененных файлов
- Описание: краткое описание изменений

Влияние:
- Масштаб: локальный/глобальный
- Зависимости: затронутые модули
- Breaking: да/нет
```

## Правила использования

### До изменений
1. Проверить текущий контекст
2. Оценить влияние планируемых изменений
3. Определить затрагиваемые модули

### После изменений
1. Зафиксировать изменения
2. Обновить состояние
3. Проверить корректность

## Пример

```markdown
[2024-03-20] Обновление контекста

Изменения:
- Тип: код
- Файлы: 
  - src/components/Board.tsx
  - src/lib/board.ts
- Описание: Добавлен drag-n-drop для изображений

Влияние:
- Масштаб: локальный
- Зависимости: компонент Board, утилиты
- Breaking: нет
```